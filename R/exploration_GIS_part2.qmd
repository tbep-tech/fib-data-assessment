---
title: "More GIS Exploration"
format: 
    html:
        fig-width: 7
        fig-height: 7
        toc: true
embed-resources: true
execute:
    echo: false
    message: false
    warning: false
    error: true
---

```{r}
library(tidyverse)
library(sf)
library(mapview)
library(khroma) # for colorblind-friendly color palettes
library(tbeptools)
```

# Data Import

## Shapefiles

```{r}
path <- here::here("GIS")

bay_segs <- st_read(here::here(path, "TBEP-Bay_Segments.shp"),
                    quiet = TRUE)
drainage_basins <- st_read(here::here(path, "Tampa_Bay_Drainage_Basins.shp"),
                    quiet = TRUE)
watersheds <- st_read(here::here(path, "Tampa_Bay_Watersheds.shp"),
                    quiet = TRUE)
wbids <- st_read(here::here(path, "Waterbody_IDs_(WBIDs).shp"),
                    quiet = TRUE)

# tbseg is a polygon layer included in tbeptools
# tidalcreeks is as well but needs to be subsetted; covers most of SWFL
```

### Metadata

```{r, eval = FALSE}
bay_segs  # NAD83
drainage_basins # WGS 84
watersheds #WGS 84
wbids # NAD83  (run 60 was WGS 84)
```

```{r}
# pull out crs of the wbids/bay_segs for future joins
to_crs <- st_crs(wbids)
bay_segs <- st_transform(bay_segs, crs = to_crs)

# subset wbids to only those intersecting bay segments
wbids <- st_intersection(wbids, bay_segs)
```

## FIB Sampling points

This file contains *results* from microbiological sampling in the 5 TBEP counties from 1995-2022. We don't necessarily need to know what the results are, just that they exist. The query from Water Quality Portal was also set to only include stations with at least 10 sampling events. The latest download was performed 1/29/2024 and [this is the link to the query](https://www.waterqualitydata.us/#countrycode=US&statecode=US%3A12&countycode=US%3A12%3A057&countycode=US%3A12%3A081&countycode=US%3A12%3A101&countycode=US%3A12%3A103&countycode=US%3A12%3A105&sampleMedia=Water&characteristicType=Microbiological&startDateLo=01-01-1995&startDateHi=12-31-2022&minactivities=10&mimeType=csv&dataProfile=biological&providers=NWIS&providers=STEWARDS&providers=STORET).

That download was pre-processed using `R/WQP_preprocessing.R` to:  

-  filter out Groundwater samples - only keeping Surface Water.  
-  only keep sample types Fecal Coliform, Total Coliform, Enterococcus, and E. coli (eliminates DNA-based samples). Total Coliform is in the processed data frame but I am ignoring it in this exploration.  
-  only keep a small subset of columns relevant to this exploration.  

This pre-processing reduced the file size from 167MB to 1MB.  

```{r}
fib_combos <- tribble(
    ~"Fecal Coliform", ~"Enterococcus", ~"Escherichia coli", ~"FIB Combo",
     "yes",             "no",            "no",                "FC Only",
     "yes",             "yes",           "no",                "FC and Entero",
     "yes",             "no",            "yes",               "FC and E. coli",
     "yes",             "yes",           "yes",               "FC, Entero, and E. coli",
     "no",              "yes",           "no",                "Entero only",
     "no",              "yes",           "yes",               "Entero and E. coli",
     "no",              "no",            "yes",               "E. coli only",
     "no",              "no",            "no",                "none of these; you filtered the dataset wrong"
)
```

```{r}
fib_samps <- read.csv(here::here("WQP downloads", "biological_reduced.csv")) |> 
    filter(CharacteristicName %in% c("Fecal Coliform", "Enterococcus", "Escherichia coli"))

# pull out distinct lat longs to intersect with other mapping layers
# keep these for later joining
fib_latlongs <- fib_samps |> 
    select(SampleStation,
           Lat,
           Long) |> 
    distinct() |> 
    na.omit() 
# make an sf object
fib_as_sf <- fib_latlongs |> 
    st_as_sf(coords = c("Long", "Lat"),
             crs = "WGS84") |> 
    st_transform(crs = to_crs) |> 
    cbind(fib_latlongs) |> 
    select(-SampleStation.1)


# only grab stations that intersect with our polygon layers of interest
# already intersected wbids with bay_segs, so only need the one here
fib_toMap <- st_intersection(fib_as_sf, wbids)  |> 
    select(SampleStation,
           Lat, Long,
           Bay.Segment = BAY_SEG,
           Water.Body.Name = WATERBODY_,
           Water.Type = WATER_TYPE,
           Class = CLASS,
           HUC,
           WBID)
```

```{r wbidtroubleshooting}
# there are many sites with duplicate rows - two associated WBIDS. What's happening?
dupes <- st_drop_geometry(fib_toMap) |>
    janitor::get_dupes(SampleStation, Lat, Long) 

dupes$duplicated <- select(dupes, SampleStation, Lat, Long) |> duplicated()

dupes_toJoin <- dupes |> 
    select(SampleStation, Lat, Long, WBID, duplicated)

fib_postMap <- fib_toMap |> 
    left_join(dupes_toJoin, by = c("SampleStation", "Lat", "Long", "WBID")) |> 
    mutate(duplicated = case_when(is.na(duplicated) ~ FALSE,
                                  .default = duplicated)) |> 
    filter(duplicated == FALSE) |> 
    select(-duplicated) |> 
    st_drop_geometry()


# write these out and decide which ones are more recently updated. muscle it.
# writexl::write_xlsx(dupes, path = here::here("WQP downloads", "stations_with_2WBIDS.xlsx"))
# 
# 
# wbids |> filter(WBID %in% dupes2$WBID) |> mapview(zcol = "WBID") + mapview(dupes2, col.regions = "yellow") -> m
# 
# mapshot(m, url = here::here("WQP downloads", "WBID_trouble_map.html"))
# mostly getting rid of double letters at the end works - but not for the two 
# way up by Oldsmar; I think they should both get 1558IA

# maybe I can just grab whichever WBID is bigger?

# might just have to hard code what I want these to be, I dunno

# dupes |> filter(!str_ends(WBID, "[:upper:]{2}")) |> janitor::get_dupes()
```

```{r, eval = FALSE}
# associate that with everything else again
fib_samps2 <- left_join(fib_samps, fib_postMap,
                        by = c("SampleStation", "Lat", "Long"))
    
# 
# joinsomestuff |>
#     mutate(sampled = "yes") |> 
#     pivot_wider(names_from = CharacteristicName,
#                 values_from = sampled,
#                 values_fill = "no") |> 
#     left_join(fib_combos)

```

# Map

```{r}
# so it won't default to dark background when cyan is the first color used
mapviewOptions(basemaps.color.shuffle = FALSE) 

# Tol color palettes: https://packages.tesselle.org/khroma/articles/tol.html#qualitative-data
map_colors <- color("pale")(6)
qual_cols <- color("muted")(7)
wbtype_cols <- color("muted")(5)
wbclass_cols <- color("muted")(4)
```

```{r}
mapview(bay_segs,
        col.regions = map_colors[4],
        label = "BAY_SEG") +
    mapview(wbids,
            col.regions = map_colors[2],
            label = "WBID",
            hide = TRUE) +
    mapview(fib_toMap,
            zcol = "BODY",
            col.regions = wbtype_cols,
            layer.name = "Water body type") +
    mapview(fib_toMap,
            zcol = "FIB.Combo",
            col.regions = qual_cols,
            layer.name = "FIBs sampled",
            hide = TRUE) +
    mapview(fib_toMap,
            zcol = "CLASS",
            col.regions = wbclass_cols,
            layer.name = "Water body class",
            hide = TRUE) +
    mapview(fib_toMap,
            zcol = "OrgName",
            layer.name = "Sampling Org",
            hide = TRUE)
```

# Tabular summaries

## By Bay Segment

```{r}
fib_toPrint <- fib_toMap |> 
    select(OrgID, Fecal.Coliform:FIB.Combo,
           WatershedName = WATERSHEDN,
           HUC, WBID, CLASS) |> 
    st_drop_geometry()

fib_summ_wshed <- fib_toPrint |> 
    summarize(.by = c(WatershedName, FIB.Combo),
              nStations = n(),
              nOrgs = length(unique(OrgID))) |> 
    mutate(nStnsOrgs = paste0(nStations, " (", nOrgs, ")")) |> 
    select(-nStations, -nOrgs) |> 
    pivot_wider(names_from = FIB.Combo,
                values_from = nStnsOrgs,
                values_fill = "0")

knitr::kable(fib_summ_wshed,
             caption = "# of Stations (# Collecting Orgs) with each combination of FIBs")
```

# Temporal investigation

## only associate points with bay_segs for now

```{r}
fib_baysegs <- st_intersection(fib_as_sf, bay_segs) |> 
    st_drop_geometry()
```

```{r}
fib_temporal <- fib_samps2 |> 
    select(SampleDate, OrgName, SampleStation, 
           Lat, Long, CharacteristicName,
           Bay.Segment, Class, WBID) |> 
    mutate(SampleDate = lubridate::ymd(SampleDate),
           Year = lubridate::year(SampleDate),
           Month = lubridate::month(SampleDate)) |> 
    distinct() |>   # eliminate duplicate samples from a station on a date
    mutate(sampled = "yes") |> 
    pivot_wider(names_from = CharacteristicName,
                values_from = sampled,
                values_fill = "no") |> 
    left_join(fib_combos)
```

How many providers? How many stations? Etc.

```{r}
apply(fib_temporal[c("OrgName", "SampleStation")], 2, function(x) length(unique(x)))
```

All of that by bay segment

```{r}
fib_temporal |> 
    summarize(.by = Bay.Segment,
              nProviders = length(unique(OrgName)),
              nStations = length(unique(SampleStation)),
              nYears = length(unique(Year)),
              earliest = min(Year),
              mostRecent = max(Year)) |> 
    gt::gt()
```

Estuarine only  

```{r}
fib_temporal |> 
    filter(Class %in% c("2", "3M")) |> 
    summarize(.by = Bay.Segment,
              nProviders = length(unique(OrgName)),
              nStations = length(unique(SampleStation)),
              nYears = length(unique(Year)),
              earliest = min(Year),
              mostRecent = max(Year)) |> 
    gt::gt()
```

