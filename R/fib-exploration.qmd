---
title: "FIB Exploration"
format: 
    html:
        fig-width: 7
        fig-height: 7
        toc: true
embed-resources: true
execute:
    echo: false
    message: false
    warning: false
    error: true
---

```{r}
library(tidyverse)
library(sf)
library(mapview)
library(khroma) # for colorblind-friendly color palettes
library(tbeptools)
library(kableExtra)
```

```{r read-shapefiles}
path <- here::here("GIS")

bay_segs <- st_read(here::here(path, "TBEP-Bay_Segments.shp"),
                    quiet = TRUE)
wbids <- st_read(here::here(path, "Waterbody_IDs_(WBIDs).shp"),
                    quiet = TRUE)

# tbseg is a polygon layer included in tbeptools
# tidalcreeks is as well but needs to be subsetted; covers most of SWFL
```

```{r modify-shapefiles}
# pull out crs of the wbids for future joins, and make sure bay_segs is in that crs
to_crs <- st_crs(wbids)
bay_segs <- st_transform(bay_segs, crs = to_crs)

# subset wbids to only those that intersect bay segments
wbids <- st_intersection(wbids, bay_segs)
```

## FIB Sampling points

This file contains *results* from microbiological sampling in the 5 TBEP counties from 1995-2022. We don't necessarily need to know what the results are, just that they exist. The query from Water Quality Portal was also set to only include stations with at least 10 sampling events. The latest download was performed 1/29/2024 and [this is the link to the query](https://www.waterqualitydata.us/#countrycode=US&statecode=US%3A12&countycode=US%3A12%3A057&countycode=US%3A12%3A081&countycode=US%3A12%3A101&countycode=US%3A12%3A103&countycode=US%3A12%3A105&sampleMedia=Water&characteristicType=Microbiological&startDateLo=01-01-1995&startDateHi=12-31-2022&minactivities=10&mimeType=csv&dataProfile=biological&providers=NWIS&providers=STEWARDS&providers=STORET).

That download was pre-processed using `R/WQP_preprocessing.R` to:  

-  filter out Groundwater samples - only keeping Surface Water.  
-  only keep sample types Fecal Coliform, Total Coliform, Enterococcus, and E. coli (eliminates DNA-based samples). Total Coliform is in the processed data frame but I am ignoring it in this exploration.  
-  only keep a small subset of columns relevant to this exploration.  

The pre-processing reduced the file size from 167MB to 40MB, and the smaller file is used in this document.  

```{r read-modify-sample-info}
fib_samps <- read.csv(here::here("data-WQP", "biological_reduced.csv")) |> 
    filter(CharacteristicName %in% c("Fecal Coliform", "Enterococcus", "Escherichia coli"))

fibs_wide <- fib_samps |> 
    mutate(SampleYear = lubridate::year(lubridate::ymd(SampleDate))) |> 
    select(OrgID, OrgName,  
           SampleStation, Lat, Long,
           CharacteristicName,
           SampleYear) |> 
    summarize(.by = OrgID:CharacteristicName,
              first = min(SampleYear, na.rm = TRUE),
              last = max(SampleYear, na.rm = TRUE)) |> 
    mutate(Years = paste(first, last, sep = " - ")) |> 
    select(-first, -last) |> 
    pivot_wider(names_from = CharacteristicName,
                values_from = Years,
                values_fill = "not sampled")

# pull out distinct lat longs to intersect with other mapping layers
# keep these for later joining
fib_latlongs <- fibs_wide |> 
    distinct() |> 
    na.omit()        
# note - 252 rows were removed by na.omit - 
# that's 252 stations without lat/longs


# turn the lat/longs into an sf object
fib_toMap <- fib_latlongs |> 
    st_as_sf(coords = c("Long", "Lat"),
             crs = "WGS84") |>              # WGS84 is default for handheld GPS units
    st_transform(crs = to_crs) |> 
    cbind(fib_latlongs[c("Lat", "Long")])


# only grab stations that intersect with our polygon layers of interest
# already intersected wbids with bay_segs, so only need the one here
fib_toMap <- st_intersection(fib_toMap, wbids)  |> 
    select(SampleStation,
           OrgName,
           Lat, Long,
           Bay.Segment = BAY_SEG,
           Water.Body.Name = WATERBODY_,
           Water.Type = WATER_TYPE,
           Class = CLASS,
           Fecal.Coliform,
           Enterococcus,
           Escherichia.coli,
           HUC,
           WBID)
```

```{r wbid-dupes}
# there are 9 sites with two associated WBIDS, due to various
# changes between runs. This causes joining problems
# doesn't matter which we keep for summary tables
# because the changes are WBID, Water Body Name, and Class -
# but always either 2 or 3M, both of which we'll keep for summaries

# will keep them in the main mapping group, in case the individual 
# WBIDs matter to TBEP in the future

# but for other summarizing, want only one WBID per station
# doesn't matter which

# identify dupes - this df contains all WBID info too
# should you want to stop and investigate
dupes <- st_drop_geometry(fib_toMap) |>
    janitor::get_dupes(SampleStation, Lat, Long)

# associate a logical column for later filtering
dupes$duplicated <- duplicated(dupes[1:3])

# select columns for less obnoxious joining
dupes <- dupes |> 
    select(SampleStation, Lat, Long, WBID, duplicated)

# join to fib_toMap and get rid of the rows identified as duplicates
fib_stnInfo <- fib_toMap |> 
    left_join(dupes, by = c("SampleStation", "Lat", "Long", "WBID")) |> 
    mutate(duplicated = case_when(is.na(duplicated) ~ FALSE,
                                  .default = duplicated)) |> 
    filter(duplicated == FALSE) |> 
    select(-duplicated) |> 
    st_drop_geometry()
```

```{r join-fibsamps-wbidinfo}
# now get all that WBID and Bay Segment info attached to the actual
# fib sample data frame
# remove sites without without associated "Bay.Segment" -
# those are either outside the area
# or they didn't have lat/longs at all in the original data
fib_tb <- left_join(fib_samps, fib_stnInfo,
                        by = c("SampleStation", "Lat", "Long")) |> 
    filter(!is.na(Bay.Segment)) 
```



# Maps  

```{r map-color-setup}
# so it won't default to dark background when cyan is the first color used
mapviewOptions(basemaps.color.shuffle = FALSE) 

# Tol color palettes: https://packages.tesselle.org/khroma/articles/tol.html#qualitative-data
map_colors <- color("pale")(6)
qual_cols <- color("muted")(7)
wbtype_cols <- color("muted")(5)
wbclass_cols <- color("muted")(4)
org_cols <- color("sunset")(length(unique(fib_toMap$OrgName)))
```

```{r}
mapview(bay_segs,
        col.regions = map_colors[4],
        label = "BAY_SEG") +
    mapview(wbids,
            col.regions = map_colors[2],
            label = "WBID",
            hide = TRUE) +
    mapview(fib_toMap,
            zcol = "Water.Type",
            col.regions = wbtype_cols,
            layer.name = "Water body type") +
    mapview(fib_toMap,
            zcol = "Class",
            col.regions = wbclass_cols,
            layer.name = "Water body class",
            hide = TRUE) +
    mapview(fib_toMap,
            zcol = "OrgName",
            col.regions = org_cols,
            layer.name = "Provider",
            hide = TRUE)
```


# Tabular Summaries  

The following tables only include information about Estuarine/Marine sampling stations; Classes 2 or 3M in the WBID shapefile.  

```{r}
fib_temporal <- fib_tb |> 
    select(SampleDate, OrgName, SampleStation, 
           Lat, Long, CharacteristicName,
           Bay.Segment, Class, WBID) |> 
    mutate(SampleDate = lubridate::ymd(SampleDate),
           Year = lubridate::year(SampleDate),
           Month = lubridate::month(SampleDate)) |> 
    distinct()    # eliminate duplicate samples for an individual fib from a station on a date

```



## By Bay Segment  

```{r}
fib_est_wide <- fib_temporal |> 
    filter(Class %in% c("2", "3M")) |> 
    summarize(.by = c(CharacteristicName, Bay.Segment),
              nProviders = length(unique(OrgName)),
              nStations = length(unique(SampleStation)),
              earliest = min(Year),
              mostRecent = max(Year)) |>
    mutate(years = paste(earliest, mostRecent, sep = "- ")) |> 
    select(-earliest, -mostRecent) |> 
    pivot_wider(id_cols = Bay.Segment,
                names_from = CharacteristicName,
                values_from = c(nProviders:years),
                names_glue = "{CharacteristicName}_{.value}",
                names_vary = "slowest")
```

```{r}
options(knitr.kable.NA = "-")
kbl(fib_est_wide,
    caption = "Estuarine and Marine FIB Information",
    col.names = c("Bay Segment",
                  rep(c("# Providers", "# Stations",
                        "Years"), times = 3)),
    align = c("l", rep("c", 9))) |> 
    kable_styling("striped", full_width = TRUE) |> 
    add_header_above(c("", 
                       "Fecal Coliform" = 3,
                       "Enterococcus" = 3,
                       "E. coli" = 3)) |> 
    column_spec(c(1, 4, 7), border_right = TRUE,
                extra_css = "border-right:2px solid lightgrey;") |> 
    column_spec(1, width_min = "2in")
```

## By Provider

```{r}
fib_est_providers <- fib_temporal |> 
    filter(Class %in% c("2", "3M")) |> 
    summarize(.by = c(CharacteristicName, Bay.Segment, OrgName),
              nStations = length(unique(SampleStation)),
              earliest = min(Year),
              mostRecent = max(Year)) |>
    mutate(years = paste(earliest, mostRecent, sep = "- ")) |> 
    select(-earliest, -mostRecent) |> 
    pivot_wider(id_cols = c(Bay.Segment, OrgName),
                names_from = CharacteristicName,
                values_from = c(nStations:years),
                names_glue = "{CharacteristicName}_{.value}",
                names_vary = "slowest") |> 
    arrange(Bay.Segment, OrgName)
```

```{r}
options(knitr.kable.NA = "-")
kbl(fib_est_providers[2:ncol(fib_est_providers)],
    caption = "Estuarine and Marine FIB Information by Provider",
    col.names = c("Bay Segment / Provider",
                  rep(c("# Stations",
                        "Years"), times = 3)),
    align = c("l", rep("c", 6))) |> 
    kable_styling("striped", full_width = TRUE) |> 
    add_header_above(c(" " = 1, 
                       "Fecal Coliform" = 2,
                       "Enterococcus" = 2,
                       "E. coli" = 2)) |> 
    column_spec(c(1, 3, 5), border_right = TRUE,
                extra_css = "border-right:2px solid lightgrey;") |> 
    column_spec(1, width_min = "2.5in") |> 
    pack_rows(index = table(fib_est_providers$Bay.Segment)) |> 
    scroll_box(height = "6in")
```


# Temporal Heatmaps  

```{r}
# generate a full grid by bay segment and month
# fib_temporal is already filtered to estuarine only, with WBID assignments
all_months <- seq.Date(from = min(lubridate::ymd(paste(fib_temporal$Year, fib_temporal$Month, "15"))), 
                       to = max(lubridate::ymd(paste(fib_temporal$Year, fib_temporal$Month, "15"))),
                       by = "months")

all_months_baysegs <- expand.grid(Date = all_months, 
                          Bay.Segment = unique(fib_temporal$Bay.Segment))


# do the same for providers
all_months_provs <- expand.grid(Date = all_months,
                                OrgName = unique(fib_temporal$OrgName))
```


## Fecal Coliform  

```{r}
# summarize # samples by bay segment
fib_monthly_bayseg <- fib_temporal |> 
    mutate(Date = lubridate::ymd(paste(Year, Month, "15"))) |>
    summarize(.by = c(Bay.Segment, Date),
              FC = sum(CharacteristicName == "Fecal Coliform"),
              Entero = sum(CharacteristicName == "Enterococcus"),
              Ecoli = sum(CharacteristicName == "Escherichia coli"))

# join to all dates and fill in NAs with 0s
fib_monthly_bayseg <- full_join(fib_monthly_bayseg, all_months_baysegs)
fib_monthly_bayseg[c("FC", "Entero", "Ecoli")][is.na(fib_monthly_bayseg[c("FC", "Entero", "Ecoli")])] <- 0


# do the same for providers
fib_monthly_provider <- fib_temporal |> 
    mutate(Date = lubridate::ymd(paste(Year, Month, "15"))) |>
    summarize(.by = c(OrgName, Date),
              FC = sum(CharacteristicName == "Fecal Coliform"),
              Entero = sum(CharacteristicName == "Enterococcus"),
              Ecoli = sum(CharacteristicName == "Escherichia coli"))
fib_monthly_provider <- full_join(fib_monthly_provider, all_months_provs)
fib_monthly_provider[c("FC", "Entero", "Ecoli")][is.na(fib_monthly_provider[c("FC", "Entero", "Ecoli")])] <- 0
    
```


Really want to expand the date grid to get all months for all segments; would be nice to make 0 a different color from the rest of the scale

```{r}
fib_monthly_bayseg |> 
    ggplot() +
    geom_tile(aes(x = Date, y = Bay.Segment, fill = FC)) +
    scale_fill_viridis_c(direction = -1) +
    labs(x = "",
         y = "",
         fill = "# Samples",
         title = "Fecal Coliform Temporal Coverage")
```


## By Provider  

```{r}
fib_monthly_provider |> 
    ggplot() +
    geom_tile(aes(x = Date, y = OrgName, fill = FC)) +
    scale_fill_viridis_c(direction = -1) +
    labs(x = "",
         y = "",
         fill = "# Samples",
         title = "Fecal Coliform Temporal Coverage by Provider")
```

