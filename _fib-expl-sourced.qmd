---
title: " "
format: html
---

```{r modify-sample-info}
fib_toMap <- fib_samps |> 
    mutate(SampleYear = lubridate::year(lubridate::ymd(SampleDate))) |> 
    select(OrgID, OrgName,  
           SampleStation, Lat, Long,
           CharacteristicName,
           SampleYear) |> 
    summarize(.by = OrgID:CharacteristicName,
              first = min(SampleYear, na.rm = TRUE),
              last = max(SampleYear, na.rm = TRUE)) |> 
    mutate(Years = paste(first, last, sep = " - ")) |> 
    select(-first, -last) |> 
    pivot_wider(names_from = CharacteristicName,
                values_from = Years,
                values_fill = "not sampled") |> 
    na.omit() |>                   # removes 252 stations without lat/longs
    st_as_sf(coords = c("Long", "Lat"),
             crs = "WGS84",
             remove = FALSE) |>    # WGS84 is default for handheld GPS units
    st_transform(crs = to_crs) 


# only grab stations that intersect with our polygon layers of interest
# already intersected wbids with bay_segs, so only need the one here
fib_toMap <- st_intersection(fib_toMap, wbids)  |> 
    select(SampleStation,
           OrgID, OrgName,
           Lat, Long,
           Bay.Segment = BAY_SEG,
           Water.Body.Name = WATERBODY_,
           Water.Type = WATER_TYPE,
           Class = CLASS,
           Fecal.Coliform,
           Enterococcus,
           Escherichia.coli,
           HUC,
           WBID)
```

```{r wbid-dupes}
# there are 9 sites with two associated WBIDS, due to various
# changes between runs. This causes joining problems.
# doesn't matter which we keep for summary tables
# because the changes are WBID, Water Body Name, and Class -
# but always either 2 or 3M, both of which we'll keep for summaries.

# will keep them in the main mapping group, in case the individual 
# WBIDs matter to TBEP in the future.
# but for other summarizing, want only one WBID per station -
# doesn't matter which. so just keep the first.

# identify dupes - this df contains all WBID info too
# should anyone want to stop and investigate them.
dupes <- st_drop_geometry(fib_toMap) |>
    janitor::get_dupes(SampleStation, Lat, Long)

# associate a logical column for later filtering
dupes$duplicated <- duplicated(dupes[1:3])

# select columns for less obnoxious joining
dupes <- dupes |> 
    select(SampleStation, Lat, Long, WBID, duplicated)

# join to fib_toMap and get rid of the rows identified as duplicates
# drop geometry so we can make fun tables
fib_stnInfo <- fib_toMap |> 
    left_join(dupes, by = c("SampleStation", "Lat", "Long", "WBID")) |> 
    mutate(duplicated = case_when(is.na(duplicated) ~ FALSE,
                                  .default = duplicated)) |> 
    filter(duplicated == FALSE) |> 
    select(-duplicated) |> 
    st_drop_geometry()


# go ahead and drop Lat and Long from fib_toMap because we don't need them
# to show up
fib_toMap <- select(fib_toMap, -Lat, -Long)
```

```{r fib-save-stnInfo}
# write out station and provider information for Marcus
# to incorporate into read_importfib()

stations_ofInterest <- fib_stnInfo |> 
    filter(Class %in% c("2", "3M")) |> 
    select(SampleStation, OrgID, OrgName, Bay.Segment, 
           Fecal.Coliform, Enterococcus, Escherichia.coli) |> 
    distinct() |> 
    arrange(OrgID)

orgs_ofInterest <- fib_stnInfo |> 
    filter(Class %in% c("2", "3M")) |> 
    select(OrgID, OrgName) |> 
    distinct() |> 
    arrange(OrgID)

# save(stations_ofInterest, orgs_ofInterest, 
#      file = here::here("data-stnsAndProviders", "stnsAndProviders.RData"))
```



```{r join-fibsamps-wbidinfo}
# now get all that WBID and Bay Segment info attached to the actual
# fib sample data frame
# remove sites without without associated "Bay.Segment" -
# those are either outside the area
# or they didn't have lat/longs at all in the original data
fib_tb <- left_join(fib_samps, fib_stnInfo,
                        by = c("SampleStation", "OrgID", "OrgName", "Lat", "Long")) |> 
    filter(!is.na(Bay.Segment)) 
```

```{r}
# and muscle some shorter names
short_names <- tibble(OrgName = c("Charlotte County Department of Health", 
                                  "City of Lakeland, Lakeland Florida", 
                                  "City of Plant City", 
                                  "City of St Petersburg", 
                                  "Division of Environmental Health, Bureau of Water Programs", 
                                  "Environmental Protection Commission of Hillsborough County", 
                                  "FL Dept. Environmental Protection, Southwest District", 
                                  "FL Dept. of Environmental Protection", 
                                  "Florida Department of Environmental Protection", 
                                  "Manatee County Parks and Natural Resources Department (Florida)", 
                                  "Pasco County Stormwater Management Division", 
                                  "Pinellas County Dept. of Environmental Management", 
                                  "Polk County Natural Resources Division", 
                                  "SMR Communities, Inc. (Florida)", 
                                  "Southwest Florida Water Management District"),
                      shortName = c("Charlotte Cty Dept of Health",
                                    "City of Lakeland",
                                    "City of Plant City",
                                    "City of St Petersburg",
                                    "DOH Div of Env Health",
                                    "Hillsborough Cty Env Prot Comm",
                                    "FLDEP, SW District",
                                    "FLDEP",
                                    "FLDEP",
                                    "Manatee Cty Parks & Nat Res Dept",
                                    "Pasco Cty Stormwater Mgmt Div",
                                    "Pinellas Cty Dept of Env Mgmt",
                                    "Polk Cty Nat Res Div",
                                    "SMR Communities Inc",
                                    "SWFWMD"))

fib_tb <- left_join(fib_tb, short_names) |> 
    mutate(shortName = case_when(is.na(shortName) ~ OrgName,  # this should happen for read_importwqp downloads
                                 .default = shortName))

fib_toMap <- left_join(fib_toMap, short_names) |> 
    mutate(shortName = case_when(is.na(shortName) ~ OrgName,
                                 .default = shortName))
```

```{r create-fib-temporal}
fib_temporal <- fib_tb |> 
    select(SampleDate, OrgName, 
           OrgNameShort = shortName,
           SampleStation, 
           Lat, Long, CharacteristicName,
           Bay.Segment, Class, WBID) |> 
    filter(Class %in% c("2", "3M")) |> 
    mutate(SampleDate = lubridate::ymd(SampleDate),
           Year = lubridate::year(SampleDate),
           Month = lubridate::month(SampleDate)) |> 
    distinct()    # eliminate duplicate samples for an individual fib from a station on a date

```

```{r}
years <- seq(from = min(fib_temporal$Year), to = max(fib_temporal$Year))
yearmonths <- expand.grid(years, 1:12)
names(yearmonths) <- c("Year", "Month")

yearmonths <- yearmonths |> 
    mutate(YearMonth = zoo::as.yearmon(paste(Year, Month, sep = "-")))



all_months_baysegs <- expand.grid(YearMonth = yearmonths$YearMonth, 
                                  Bay.Segment = unique(fib_temporal$Bay.Segment)) |> 
    left_join(yearmonths, by = "YearMonth")


# do the same for providers
all_months_provs <- expand.grid(YearMonth = yearmonths$YearMonth,
                                OrgNameShort = unique(fib_temporal$OrgNameShort)) |> 
    left_join(yearmonths, by = "YearMonth")

# and provider x bayseg
all_months_providers_baysegs <- expand.grid(YearMonth = yearmonths$YearMonth, 
                                  Bay.Segment = unique(fib_temporal$Bay.Segment),
                                  OrgNameShort = unique(fib_temporal$OrgNameShort)) |> 
    left_join(yearmonths, by = "YearMonth")
```


```{r}
# summarize # samples by bay segment
fib_monthly_bayseg <- fib_temporal |> 
    summarize(.by = c(Bay.Segment, Year, Month),
              "Fecal Coliform" = sum(CharacteristicName == "Fecal Coliform"),
              Enterococcus = sum(CharacteristicName == "Enterococcus"),
              E.coli = sum(CharacteristicName == "Escherichia coli")) |> 
    arrange(Bay.Segment, Year, Month)

# join to all dates and fill in NAs with 0s
fib_monthly_bayseg <- full_join(fib_monthly_bayseg, all_months_baysegs) |> 
    relocate(YearMonth, .after = Month)
fib_monthly_bayseg[5:7][is.na(fib_monthly_bayseg[5:7])] <- 0


# do the same for providers
fib_monthly_provider <- fib_temporal |> 
    summarize(.by = c(OrgNameShort, Year, Month),
              "Fecal Coliform" = sum(CharacteristicName == "Fecal Coliform"),
              Enterococcus = sum(CharacteristicName == "Enterococcus"),
              E.coli = sum(CharacteristicName == "Escherichia coli")) |> 
    arrange(OrgNameShort, Year, Month)
fib_monthly_provider <- full_join(fib_monthly_provider, all_months_provs) |> 
    relocate(YearMonth, .after = Month)
fib_monthly_provider[5:7][is.na(fib_monthly_provider[5:7])] <- 0


# and provider x baysegment  
fib_monthly_provider_bayseg <- fib_temporal |> 
    summarize(.by = c(OrgNameShort, Bay.Segment, Year, Month),
              "Fecal Coliform" = sum(CharacteristicName == "Fecal Coliform"),
              Enterococcus = sum(CharacteristicName == "Enterococcus"),
              E.coli = sum(CharacteristicName == "Escherichia coli")) |> 
    arrange(Bay.Segment, OrgNameShort, Year, Month)
fib_monthly_provider_bayseg <- full_join(fib_monthly_provider_bayseg, all_months_providers_baysegs) |> 
    relocate(YearMonth, .after = Month)
fib_monthly_provider_bayseg[6:8][is.na(fib_monthly_provider_bayseg[6:8])] <- 0

```


```{r}
fib_bayseg_long <- fib_monthly_bayseg |> 
    pivot_longer(5:7, names_to = "Indicator",
                 values_to = "Count")

fib_provider_long <- fib_monthly_provider |> 
    pivot_longer(5:7, names_to = "Indicator",
                 values_to = "Count")

fib_provider_bayseg_long <- fib_monthly_provider_bayseg |> 
    pivot_longer(6:8, names_to = "Indicator",
                 values_to = "Count")
```







## Temporal Heatmaps  

For 2 & 3M Classes, within the TBEP boundaries, only.  


### By Bay Segment  

```{r, fig.height = 6, fig.width = 10}
# hacky, but it works. turn 0s into NAs and use the na color option
# in scale_fill_viridis to make the 0s gray.

fib_bayseg_long2 <- fib_bayseg_long |> 
    mutate(Count = case_when(Count == 0 ~ NA_real_,
                             .default = Count))

p <- fib_bayseg_long2 |> 
    ggplot() +
    geom_tile(aes(x = YearMonth, y = Bay.Segment, fill = Count),
              na.rm = FALSE) +
    scale_fill_distiller(palette = "GnBu",
                         direction = -1,
                         na.value = "gray70") +
    facet_wrap(~Indicator, ncol = 3) +
    labs(x = "",
         y = "",
         fill = "# Samples",
         title = "Sampling Coverage by Bay Segment")

p <- p +
    theme_bw() +
    theme(panel.background = element_rect(fill = "gray70",
                                colour = "gray70"),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          axis.text.x = element_text(size = rel(0.9),
                                     angle = 40,
                                     hjust = 1,
                                     vjust = 1),
          legend.position = "top",
          legend.justification = "left")

ggplotly(p)
```


### By Provider  

```{r, fig.height = 6, fig.width = 10}
# hacky, but it works. turn 0s into NAs and use the na color option
# in scale_fill_viridis to make the 0s gray.

fib_provider_long2 <- fib_provider_long |> 
    mutate(Count = case_when(Count == 0 ~ NA_real_,
                             .default = Count))

p <- fib_provider_long2 |> 
    ggplot() +
    geom_tile(aes(x = YearMonth, y = OrgNameShort, fill = Count),
              na.rm = FALSE) +
    scale_fill_distiller(palette = "GnBu",
                         direction = -1,
                         na.value = "gray70") +
    facet_wrap(~Indicator, ncol = 3) +
    labs(x = "",
         y = "",
         fill = "# Samples",
         title = "Sampling Coverage by Provider")

p <- p +
    theme_bw() +
    theme(panel.background = element_rect(fill = "gray70",
                                colour = "gray70"),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          axis.text.x = element_text(size = rel(0.9),
                                     angle = 40,
                                     hjust = 1,
                                     vjust = 1),
          legend.position = "top",
          legend.justification = "left")
ggplotly(p)
```

### Enterococcus: Provider x BaySeg

```{r, fig.height = 10, fig.width = 8}
# hacky, but it works. turn 0s into NAs and use the na color option
# in scale_fill_viridis to make the 0s gray.

fib_provider_bayseg_long2 <- fib_provider_bayseg_long |> 
    mutate(Count = case_when(Count == 0 ~ NA_real_,
                             .default = Count))

p <- fib_provider_bayseg_long2 |> 
    filter(Indicator == "Enterococcus") |> 
    ggplot() +
    geom_tile(aes(x = YearMonth, y = OrgNameShort, fill = Count),
              na.rm = FALSE) +
    scale_fill_distiller(palette = "GnBu",
                         direction = -1,
                         na.value = "gray70") +
    facet_wrap(~Bay.Segment, ncol = 2) +
    labs(x = "",
         y = "",
         fill = "# Samples",
         title = "Enterococcus Sampling Coverage by Bay Segment and Provider")

p <- p +
    theme_bw() +
    theme(panel.background = element_rect(fill = "gray70",
                                colour = "gray70"),
          panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          axis.text.x = element_text(size = rel(0.9),
                                     angle = 40,
                                     hjust = 1,
                                     vjust = 1),
          axis.text.y = element_text(size = rel(0.9)),
          legend.position = "top",
          legend.justification = "left")
ggplotly(p)
```


## Maps  

```{r map-color-setup}
# so maps won't default to dark background when cyan is the first color used
mapviewOptions(basemaps.color.shuffle = FALSE) 

# Tol color palettes: https://packages.tesselle.org/khroma/articles/tol.html#qualitative-data
map_colors <- color("pale")(6)
qual_cols <- color("muted")(7)
wbtype_cols <- color("muted")(5)
wbclass_cols <- color("muted")(4)
org_cols <- color("sunset")(length(unique(fib_toMap$OrgName)))

# sampling org colors
# building in flexibility in case there are more than 7 someday
n_est_orgs <- fib_toMap |> filter(Class %in% c("2", "3M")) |> st_drop_geometry() |>  select(OrgName) |> distinct() |> nrow()
if(n_est_orgs <=9){
    est_org_cols <- color("muted")(n_est_orgs)
    } else {est_org_cols <- color("sunset")(n_est_orgs)}
```

### All stations in TBEP boundary  

```{r}
mapview(bay_segs,
        col.regions = map_colors[4],
        label = "BAY_SEG") +
    mapview(wbids,
            col.regions = map_colors[2],
            label = "WBID",
            hide = TRUE) +
    mapview(fib_toMap,
            zcol = "Class",
            col.regions = wbclass_cols,
            layer.name = "Water body class") +
    mapview(fib_toMap,
            zcol = "shortName",
            col.regions = org_cols,
            layer.name = "Provider",
            hide = TRUE)
```


### All vs. Estuarine/Marine Only   

Filtering by Class, to be either 2 or 3M  

```{r}
mapview(filter(fib_toMap, Class %in% c("2", "3M")),
            zcol = "Class",
            col.regions = color("muted")(2),
            layer.name = "Estuarine Only") +
    mapview(fib_toMap,
            zcol = "Class",
            col.regions = wbclass_cols,
            layer.name = "All")
```

### Estuarine/Marine Only  

```{r}
mapview(bay_segs,
        col.regions = map_colors[4],
        label = "BAY_SEG") +
    mapview(wbids,
            col.regions = map_colors[2],
            label = "WBID",
            hide = TRUE) +
    mapview(filter(fib_toMap, Class %in% c("2", "3M")),
            zcol = "shortName",
            col.regions = est_org_cols,
            layer.name = "Provider")
```


### Timing of Enterococcus sampling, Estuarine/Marine only  



```{r}
entero_toMap <- 
    fib_toMap |> 
    select(SampleStation, OrgName, Water.Type, Class,
           Indicator = Enterococcus) |> 
    filter(Indicator != "not sampled",
           Class %in% c("2", "3M")) |> 
    separate(Indicator, into = c("start", "latest"), sep = " - ") |> 
    mutate(across(c(start, latest), as.numeric),
           tslength = latest - start)
```

```{r}

mapview(filter(entero_toMap, latest >= yrsplit),
            layer.name = paste0("Enterococcus Stations sampled since ", yrsplit),
            hide = FALSE) +
    mapview(entero_toMap,
        zcol = "latest",
        at = seq(min(entero_toMap$latest), max(entero_toMap$latest), length.out = col_scale_divs),
        col.regions = khroma::color("devon")(col_scale_divs),
        layer.name = "All Entero Stations by latest sample year",
        hide = TRUE) +
    mapview(entero_toMap,
        zcol = "tslength",
        at = seq(min(entero_toMap$tslength), max(entero_toMap$tslength), length.out = col_scale_divs),
        col.regions = khroma::color("devon")(col_scale_divs),  # n should be the same as length.out in the at seq() above
        layer.name = "All Entero Stations by time series length",
        hide = TRUE) 

```


## Tabular Summaries  

The following tables only include information about Estuarine/Marine sampling stations; Classes 2 or 3M in the WBID shapefile.  




### By Bay Segment  

```{r}
fib_est_wide <- fib_temporal |> 
    summarize(.by = c(CharacteristicName, Bay.Segment),
              nProviders = length(unique(OrgName)),
              nStations = length(unique(SampleStation)),
              earliest = min(Year),
              mostRecent = max(Year)) |>
    mutate(years = paste(earliest, mostRecent, sep = "- ")) |> 
    select(-earliest, -mostRecent) |> 
    pivot_wider(id_cols = Bay.Segment,
                names_from = CharacteristicName,
                values_from = c(nProviders:years),
                names_glue = "{CharacteristicName}_{.value}",
                names_vary = "slowest")
```

```{r}
options(knitr.kable.NA = "-")
kbl(fib_est_wide,
    caption = "Estuarine and Marine FIB Information",
    col.names = c("Bay Segment",
                  rep(c("# Providers", "# Stations",
                        "Years"), times = 3)),
    align = c("l", rep("c", 9))) |> 
    kable_styling("striped", full_width = TRUE) |> 
    add_header_above(c("", 
                       "Fecal Coliform" = 3,
                       "Enterococcus" = 3,
                       "E. coli" = 3)) |> 
    column_spec(c(1, 4, 7), border_right = TRUE,
                extra_css = "border-right:2px solid lightgrey;") |> 
    column_spec(1, width_min = "2in")
```

### By Provider

```{r}
fib_est_providers <- fib_temporal |> 
    summarize(.by = c(CharacteristicName, Bay.Segment, OrgName),
              nStations = length(unique(SampleStation)),
              earliest = min(Year),
              mostRecent = max(Year)) |>
    mutate(years = paste(earliest, mostRecent, sep = "- ")) |> 
    select(-earliest, -mostRecent) |> 
    pivot_wider(id_cols = c(Bay.Segment, OrgName),
                names_from = CharacteristicName,
                values_from = c(nStations:years),
                names_glue = "{CharacteristicName}_{.value}",
                names_vary = "slowest") |> 
    arrange(Bay.Segment, OrgName)
```

```{r}
options(knitr.kable.NA = "-")
kbl(fib_est_providers[2:ncol(fib_est_providers)],
    caption = "Estuarine and Marine FIB Information by Provider",
    col.names = c("Bay Segment / Provider",
                  rep(c("# Stations",
                        "Years"), times = 3)),
    align = c("l", rep("c", 6))) |> 
    kable_styling("striped", full_width = TRUE) |> 
    add_header_above(c(" " = 1, 
                       "Fecal Coliform" = 2,
                       "Enterococcus" = 2,
                       "E. coli" = 2)) |> 
    column_spec(c(1, 3, 5), border_right = TRUE,
                extra_css = "border-right:2px solid lightgrey;") |> 
    column_spec(1, width_min = "2.5in") |> 
    pack_rows(index = table(fib_est_providers$Bay.Segment)) |> 
    scroll_box(height = "6in")
```

